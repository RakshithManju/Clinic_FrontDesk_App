// app/api/auth/login/route.ts
const headers = new Headers({ "content-type": "application/json" });
headers.append("set-cookie", setAccessCookie(at));
headers.append("set-cookie", setRefreshCookie(rt));

// app/api/auth/refresh/route.ts
const headers = new Headers({ "content-type": "application/json" });
headers.append("set-cookie", setAccessCookie(at));
headers.append("set-cookie", setRefreshCookie(newRt));

// app/api/auth/logout/route.ts
const headers = new Headers();
for (const c of clearAuthCookies()) headers.append("set-cookie", c);

// app/page.tsx
import FrontDeskApp from "@/components/frontdesk/frontdesk-app"

export default function Page() {
return (
  <main className="min-h-[100dvh] bg-background">
    <FrontDeskApp />
  </main>
)
}

// components/data-table.tsx
import { flexRender } from "@tanstack/react-table"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { ChevronLeft, ChevronRight } from 'lucide-react'

interface DataTableProps<TData, TValue> {
columns: any
table: any
toolbar?: any
loading?: boolean
skeletonRows?: number
emptyMessage?: string
}

export function DataTable<TData, TValue>({
columns,
table,
toolbar,
loading,
skeletonRows = 5,
emptyMessage = "No results found.",
}: DataTableProps<TData, TValue>) {
return (
  <div className="w-full space-y-3">
    {toolbar}
    <div className="rounded-md border overflow-x-auto">
      <Table className="min-w-[720px]">
        <TableHeader>
          {table.getHeaderGroups().map((hg) => (
            <TableRow key={hg.id}>
              {hg.headers.map((header) => (
                <TableHead key={header.id} className="whitespace-nowrap">
                  {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                </TableHead>
              ))}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {loading ? (
            Array.from({ length: skeletonRows }).map((_, i) => (
              <TableRow key={`sk-${i}`}>
                {columns.map((_, j) => (
                  <TableCell key={`skc-${j}`}>
                    <div className="h-4 w-full animate-pulse rounded bg-muted" />
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow key={row.id} data-state={row.getIsSelected() && "selected"}>
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center text-sm text-muted-foreground">
                {emptyMessage}
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        onClick={() => table.previousPage()}
        disabled={!table.getCanPreviousPage()}
        aria-label="Previous page"
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Prev
      </Button>
      <div className="text-sm text-muted-foreground">
        Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount() || 1}
      </div>
      <Button
        variant="outline"
        size="sm"
        onClick={() => table.nextPage()}
        disabled={!table.getCanNextPage()}
        aria-label="Next page"
      >
        Next
        <ChevronRight className="ml-2 h-4 w-4" />
      </Button>
    </div>
  </div>
)
}
